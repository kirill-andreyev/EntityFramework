// <auto-generated />
using System;
using ConsoleApp1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211024083822_migration1")]
    partial class migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsoleApp1.Autor", b =>
                {
                    b.Property<int>("autorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("autorName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("death")
                        .HasColumnType("datetime2");

                    b.Property<string>("originalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("autorId");

                    b.HasIndex("autorName")
                        .HasDatabaseName("a_name_idx");

                    b.ToTable("Autors");
                });

            modelBuilder.Entity("ConsoleApp1.AutorPseudonym", b =>
                {
                    b.Property<int>("PseudonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("PseudonymId1")
                        .HasColumnType("int");

                    b.HasKey("PseudonymId");

                    b.HasIndex("AutorId");

                    b.HasIndex("PseudonymId1");

                    b.ToTable("AutorPseudonyms");
                });

            modelBuilder.Entity("ConsoleApp1.AutorWork", b =>
                {
                    b.Property<int>("AutorAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("WorkWId")
                        .HasColumnType("int");

                    b.Property<int?>("autorId")
                        .HasColumnType("int");

                    b.HasKey("AutorAId");

                    b.HasIndex("WorkId");

                    b.HasIndex("autorId");

                    b.ToTable("AutorWorks");
                });

            modelBuilder.Entity("ConsoleApp1.Bookstory", b =>
                {
                    b.Property<int>("BoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("BoodId");

                    b.HasIndex("WorkId");

                    b.ToTable("Bookstories");
                });

            modelBuilder.Entity("ConsoleApp1.JournalPublication", b =>
                {
                    b.Property<int>("JournalPublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JournalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Release")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("JournalPublicationId");

                    b.HasIndex("WorkId");

                    b.ToTable("JournalPublications");
                });

            modelBuilder.Entity("ConsoleApp1.Pseudonym", b =>
                {
                    b.Property<int>("PseudonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PseudonymName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PseudonymId");

                    b.ToTable("Pseudonyms");
                });

            modelBuilder.Entity("ConsoleApp1.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OriginalAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OriginalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("TranslationId");

                    b.HasIndex("WorkId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ConsoleApp1.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("ConsoleApp1.WorkWork", b =>
                {
                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId1")
                        .HasColumnType("int");

                    b.HasKey("WorkId", "WorkId1");

                    b.ToTable("WorkWorks");
                });

            modelBuilder.Entity("ConsoleApp1.AutorPseudonym", b =>
                {
                    b.HasOne("ConsoleApp1.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Pseudonym", "pseudonym")
                        .WithMany()
                        .HasForeignKey("PseudonymId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("pseudonym");
                });

            modelBuilder.Entity("ConsoleApp1.AutorWork", b =>
                {
                    b.HasOne("ConsoleApp1.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId");

                    b.HasOne("ConsoleApp1.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("autorId");

                    b.Navigation("Autor");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("ConsoleApp1.Bookstory", b =>
                {
                    b.HasOne("ConsoleApp1.Work", "work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("work");
                });

            modelBuilder.Entity("ConsoleApp1.JournalPublication", b =>
                {
                    b.HasOne("ConsoleApp1.Work", "work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("work");
                });

            modelBuilder.Entity("ConsoleApp1.Translation", b =>
                {
                    b.HasOne("ConsoleApp1.Work", "work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("work");
                });

            modelBuilder.Entity("ConsoleApp1.WorkWork", b =>
                {
                    b.HasOne("ConsoleApp1.Work", "work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("work");
                });
#pragma warning restore 612, 618
        }
    }
}
