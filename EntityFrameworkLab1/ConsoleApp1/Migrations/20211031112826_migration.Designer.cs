// <auto-generated />
using System;
using EFLAB1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkLab.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211031112826_migration")]
    partial class migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFLAB1.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Death")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.HasIndex("AuthorName")
                        .HasDatabaseName("a_name_idx");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EFLAB1.AuthorPseudonym", b =>
                {
                    b.Property<int>("PseudonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PseudonymId1")
                        .HasColumnType("int");

                    b.HasKey("PseudonymId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PseudonymId1");

                    b.ToTable("AuthorPseudonyms");
                });

            modelBuilder.Entity("EFLAB1.AuthorWork", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId1")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("AuthorId1");

                    b.HasIndex("WorkId");

                    b.ToTable("AuthorWorks");
                });

            modelBuilder.Entity("EFLAB1.Bookstory", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("WorkId");

                    b.ToTable("Bookstories");
                });

            modelBuilder.Entity("EFLAB1.JournalPublication", b =>
                {
                    b.Property<int>("JournalPublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JournalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Release")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("JournalPublicationId");

                    b.HasIndex("WorkId");

                    b.ToTable("JournalPublications");
                });

            modelBuilder.Entity("EFLAB1.Pseudonym", b =>
                {
                    b.Property<int>("PseudonymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PseudonymName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PseudonymId");

                    b.ToTable("Pseudonyms");
                });

            modelBuilder.Entity("EFLAB1.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OriginalAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OriginalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("TranslationId");

                    b.HasIndex("WorkId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("EFLAB1.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("EFLAB1.WorkWork", b =>
                {
                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId1")
                        .HasColumnType("int");

                    b.HasKey("WorkId", "WorkId1");

                    b.HasIndex("WorkId1");

                    b.ToTable("WorkWorks");
                });

            modelBuilder.Entity("EFLAB1.AuthorPseudonym", b =>
                {
                    b.HasOne("EFLAB1.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFLAB1.Pseudonym", "Pseudonym")
                        .WithMany()
                        .HasForeignKey("PseudonymId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Pseudonym");
                });

            modelBuilder.Entity("EFLAB1.AuthorWork", b =>
                {
                    b.HasOne("EFLAB1.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Bookstory", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.JournalPublication", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Translation", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.WorkWork", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany("WorkWork")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFLAB1.Work", "Work1")
                        .WithMany("WorkWork1")
                        .HasForeignKey("WorkId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Work");

                    b.Navigation("Work1");
                });

            modelBuilder.Entity("EFLAB1.Work", b =>
                {
                    b.Navigation("WorkWork");

                    b.Navigation("WorkWork1");
                });
#pragma warning restore 612, 618
        }
    }
}
