// <auto-generated />
using System;
using EFLAB1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkLab.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFLAB1.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Death")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.HasIndex("AuthorName")
                        .HasDatabaseName("a_name_idx");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EFLAB1.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("WorkId")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EFLAB1.Collection", b =>
                {
                    b.Property<int>("Work1Id")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Work1Id", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("EFLAB1.JournalPublication", b =>
                {
                    b.Property<int>("JournalPublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JournalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Release")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("JournalPublicationId");

                    b.HasIndex("WorkId")
                        .IsUnique();

                    b.ToTable("JournalPublications");
                });

            modelBuilder.Entity("EFLAB1.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OriginalAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OriginalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("TranslationId");

                    b.HasIndex("WorkId")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("EFLAB1.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkId");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Works");
                });

            modelBuilder.Entity("EFLAB1.Book", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithOne("Book")
                        .HasForeignKey("EFLAB1.Book", "WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Collection", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithMany("Collections")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.JournalPublication", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithOne("JournalPublication")
                        .HasForeignKey("EFLAB1.JournalPublication", "WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Translation", b =>
                {
                    b.HasOne("EFLAB1.Work", "Work")
                        .WithOne("Translation")
                        .HasForeignKey("EFLAB1.Translation", "WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Work", b =>
                {
                    b.HasOne("EFLAB1.Author", "Author")
                        .WithOne("Work")
                        .HasForeignKey("EFLAB1.Work", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EFLAB1.Author", b =>
                {
                    b.Navigation("Work");
                });

            modelBuilder.Entity("EFLAB1.Work", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Collections");

                    b.Navigation("JournalPublication");

                    b.Navigation("Translation");
                });
#pragma warning restore 612, 618
        }
    }
}
